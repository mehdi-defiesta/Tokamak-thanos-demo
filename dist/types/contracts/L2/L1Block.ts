/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface L1BlockInterface extends utils.Interface {
  functions: {
    "DEPOSITOR_ACCOUNT()": FunctionFragment;
    "basefee()": FunctionFragment;
    "hash()": FunctionFragment;
    "number()": FunctionFragment;
    "sequenceNumber()": FunctionFragment;
    "setL1BlockValues(uint64,uint64,uint256,bytes32,uint64)": FunctionFragment;
    "timestamp()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEPOSITOR_ACCOUNT"
      | "basefee"
      | "hash"
      | "number"
      | "sequenceNumber"
      | "setL1BlockValues"
      | "timestamp"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEPOSITOR_ACCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "basefee", values?: undefined): string;
  encodeFunctionData(functionFragment: "hash", values?: undefined): string;
  encodeFunctionData(functionFragment: "number", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sequenceNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setL1BlockValues",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEPOSITOR_ACCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "basefee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "number", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sequenceNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1BlockValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface L1Block extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1BlockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEPOSITOR_ACCOUNT(overrides?: CallOverrides): Promise<[string]>;

    basefee(overrides?: CallOverrides): Promise<[BigNumber]>;

    hash(overrides?: CallOverrides): Promise<[string]>;

    number(overrides?: CallOverrides): Promise<[BigNumber]>;

    sequenceNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    setL1BlockValues(
      _number: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _basefee: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      _sequenceNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  DEPOSITOR_ACCOUNT(overrides?: CallOverrides): Promise<string>;

  basefee(overrides?: CallOverrides): Promise<BigNumber>;

  hash(overrides?: CallOverrides): Promise<string>;

  number(overrides?: CallOverrides): Promise<BigNumber>;

  sequenceNumber(overrides?: CallOverrides): Promise<BigNumber>;

  setL1BlockValues(
    _number: PromiseOrValue<BigNumberish>,
    _timestamp: PromiseOrValue<BigNumberish>,
    _basefee: PromiseOrValue<BigNumberish>,
    _hash: PromiseOrValue<BytesLike>,
    _sequenceNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timestamp(overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEPOSITOR_ACCOUNT(overrides?: CallOverrides): Promise<string>;

    basefee(overrides?: CallOverrides): Promise<BigNumber>;

    hash(overrides?: CallOverrides): Promise<string>;

    number(overrides?: CallOverrides): Promise<BigNumber>;

    sequenceNumber(overrides?: CallOverrides): Promise<BigNumber>;

    setL1BlockValues(
      _number: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _basefee: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      _sequenceNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    DEPOSITOR_ACCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    basefee(overrides?: CallOverrides): Promise<BigNumber>;

    hash(overrides?: CallOverrides): Promise<BigNumber>;

    number(overrides?: CallOverrides): Promise<BigNumber>;

    sequenceNumber(overrides?: CallOverrides): Promise<BigNumber>;

    setL1BlockValues(
      _number: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _basefee: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      _sequenceNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEPOSITOR_ACCOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    basefee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    number(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sequenceNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setL1BlockValues(
      _number: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _basefee: PromiseOrValue<BigNumberish>,
      _hash: PromiseOrValue<BytesLike>,
      _sequenceNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
