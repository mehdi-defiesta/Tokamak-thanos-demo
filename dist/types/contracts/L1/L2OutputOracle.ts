/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Types {
  export type OutputProposalStruct = {
    outputRoot: PromiseOrValue<BytesLike>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type OutputProposalStructOutput = [string, BigNumber] & {
    outputRoot: string;
    timestamp: BigNumber;
  };
}

export interface L2OutputOracleInterface extends utils.Interface {
  functions: {
    "HISTORICAL_TOTAL_BLOCKS()": FunctionFragment;
    "L2_BLOCK_TIME()": FunctionFragment;
    "STARTING_BLOCK_NUMBER()": FunctionFragment;
    "STARTING_TIMESTAMP()": FunctionFragment;
    "SUBMISSION_INTERVAL()": FunctionFragment;
    "changeProposer(address)": FunctionFragment;
    "computeL2Timestamp(uint256)": FunctionFragment;
    "deleteL2Output((bytes32,uint256))": FunctionFragment;
    "getL2Output(uint256)": FunctionFragment;
    "initialize(bytes32,uint256,address,address)": FunctionFragment;
    "latestBlockNumber()": FunctionFragment;
    "nextBlockNumber()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposeL2Output(bytes32,uint256,bytes32,uint256)": FunctionFragment;
    "proposer()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "HISTORICAL_TOTAL_BLOCKS"
      | "L2_BLOCK_TIME"
      | "STARTING_BLOCK_NUMBER"
      | "STARTING_TIMESTAMP"
      | "SUBMISSION_INTERVAL"
      | "changeProposer"
      | "computeL2Timestamp"
      | "deleteL2Output"
      | "getL2Output"
      | "initialize"
      | "latestBlockNumber"
      | "nextBlockNumber"
      | "owner"
      | "proposeL2Output"
      | "proposer"
      | "renounceOwnership"
      | "transferOwnership"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "HISTORICAL_TOTAL_BLOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "L2_BLOCK_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STARTING_BLOCK_NUMBER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STARTING_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBMISSION_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeProposer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeL2Timestamp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteL2Output",
    values: [Types.OutputProposalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getL2Output",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "latestBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeL2Output",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "proposer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "HISTORICAL_TOTAL_BLOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "L2_BLOCK_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STARTING_BLOCK_NUMBER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STARTING_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBMISSION_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeL2Timestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteL2Output",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2Output",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeL2Output",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OutputDeleted(bytes32,uint256,uint256)": EventFragment;
    "OutputProposed(bytes32,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposerChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutputDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutputProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposerChanged"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OutputDeletedEventObject {
  outputRoot: string;
  l1Timestamp: BigNumber;
  l2BlockNumber: BigNumber;
}
export type OutputDeletedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OutputDeletedEventObject
>;

export type OutputDeletedEventFilter = TypedEventFilter<OutputDeletedEvent>;

export interface OutputProposedEventObject {
  outputRoot: string;
  l1Timestamp: BigNumber;
  l2BlockNumber: BigNumber;
}
export type OutputProposedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OutputProposedEventObject
>;

export type OutputProposedEventFilter = TypedEventFilter<OutputProposedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProposerChangedEventObject {
  previousProposer: string;
  newProposer: string;
}
export type ProposerChangedEvent = TypedEvent<
  [string, string],
  ProposerChangedEventObject
>;

export type ProposerChangedEventFilter = TypedEventFilter<ProposerChangedEvent>;

export interface L2OutputOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2OutputOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HISTORICAL_TOTAL_BLOCKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    STARTING_BLOCK_NUMBER(overrides?: CallOverrides): Promise<[BigNumber]>;

    STARTING_TIMESTAMP(overrides?: CallOverrides): Promise<[BigNumber]>;

    SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeProposer(
      _newProposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    computeL2Timestamp(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deleteL2Output(
      _proposal: Types.OutputProposalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getL2Output(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Types.OutputProposalStructOutput]>;

    initialize(
      _genesisL2Output: PromiseOrValue<BytesLike>,
      _startingBlockNumber: PromiseOrValue<BigNumberish>,
      _proposer: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    latestBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposeL2Output(
      _outputRoot: PromiseOrValue<BytesLike>,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l1Blockhash: PromiseOrValue<BytesLike>,
      _l1BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposer(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  HISTORICAL_TOTAL_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

  L2_BLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  STARTING_BLOCK_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

  STARTING_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

  SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  changeProposer(
    _newProposer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  computeL2Timestamp(
    _l2BlockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deleteL2Output(
    _proposal: Types.OutputProposalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getL2Output(
    _l2BlockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Types.OutputProposalStructOutput>;

  initialize(
    _genesisL2Output: PromiseOrValue<BytesLike>,
    _startingBlockNumber: PromiseOrValue<BigNumberish>,
    _proposer: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  nextBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposeL2Output(
    _outputRoot: PromiseOrValue<BytesLike>,
    _l2BlockNumber: PromiseOrValue<BigNumberish>,
    _l1Blockhash: PromiseOrValue<BytesLike>,
    _l1BlockNumber: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposer(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    HISTORICAL_TOTAL_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    STARTING_BLOCK_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

    STARTING_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    changeProposer(
      _newProposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    computeL2Timestamp(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteL2Output(
      _proposal: Types.OutputProposalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getL2Output(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Types.OutputProposalStructOutput>;

    initialize(
      _genesisL2Output: PromiseOrValue<BytesLike>,
      _startingBlockNumber: PromiseOrValue<BigNumberish>,
      _proposer: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    nextBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposeL2Output(
      _outputRoot: PromiseOrValue<BytesLike>,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l1Blockhash: PromiseOrValue<BytesLike>,
      _l1BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposer(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OutputDeleted(bytes32,uint256,uint256)"(
      outputRoot?: PromiseOrValue<BytesLike> | null,
      l1Timestamp?: PromiseOrValue<BigNumberish> | null,
      l2BlockNumber?: PromiseOrValue<BigNumberish> | null
    ): OutputDeletedEventFilter;
    OutputDeleted(
      outputRoot?: PromiseOrValue<BytesLike> | null,
      l1Timestamp?: PromiseOrValue<BigNumberish> | null,
      l2BlockNumber?: PromiseOrValue<BigNumberish> | null
    ): OutputDeletedEventFilter;

    "OutputProposed(bytes32,uint256,uint256)"(
      outputRoot?: PromiseOrValue<BytesLike> | null,
      l1Timestamp?: PromiseOrValue<BigNumberish> | null,
      l2BlockNumber?: PromiseOrValue<BigNumberish> | null
    ): OutputProposedEventFilter;
    OutputProposed(
      outputRoot?: PromiseOrValue<BytesLike> | null,
      l1Timestamp?: PromiseOrValue<BigNumberish> | null,
      l2BlockNumber?: PromiseOrValue<BigNumberish> | null
    ): OutputProposedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProposerChanged(address,address)"(
      previousProposer?: PromiseOrValue<string> | null,
      newProposer?: PromiseOrValue<string> | null
    ): ProposerChangedEventFilter;
    ProposerChanged(
      previousProposer?: PromiseOrValue<string> | null,
      newProposer?: PromiseOrValue<string> | null
    ): ProposerChangedEventFilter;
  };

  estimateGas: {
    HISTORICAL_TOTAL_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    STARTING_BLOCK_NUMBER(overrides?: CallOverrides): Promise<BigNumber>;

    STARTING_TIMESTAMP(overrides?: CallOverrides): Promise<BigNumber>;

    SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    changeProposer(
      _newProposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    computeL2Timestamp(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteL2Output(
      _proposal: Types.OutputProposalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getL2Output(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _genesisL2Output: PromiseOrValue<BytesLike>,
      _startingBlockNumber: PromiseOrValue<BigNumberish>,
      _proposer: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    nextBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposeL2Output(
      _outputRoot: PromiseOrValue<BytesLike>,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l1Blockhash: PromiseOrValue<BytesLike>,
      _l1BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposer(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    HISTORICAL_TOTAL_BLOCKS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STARTING_BLOCK_NUMBER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STARTING_TIMESTAMP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBMISSION_INTERVAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeProposer(
      _newProposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    computeL2Timestamp(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteL2Output(
      _proposal: Types.OutputProposalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getL2Output(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _genesisL2Output: PromiseOrValue<BytesLike>,
      _startingBlockNumber: PromiseOrValue<BigNumberish>,
      _proposer: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    latestBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeL2Output(
      _outputRoot: PromiseOrValue<BytesLike>,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l1Blockhash: PromiseOrValue<BytesLike>,
      _l1BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
