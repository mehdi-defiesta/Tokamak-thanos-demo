/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Types {
  export type WithdrawalTransactionStruct = {
    nonce: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<string>;
    target: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    gasLimit: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type WithdrawalTransactionStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    nonce: BigNumber;
    sender: string;
    target: string;
    value: BigNumber;
    gasLimit: BigNumber;
    data: string;
  };

  export type OutputRootProofStruct = {
    version: PromiseOrValue<BytesLike>;
    stateRoot: PromiseOrValue<BytesLike>;
    messagePasserStorageRoot: PromiseOrValue<BytesLike>;
    latestBlockhash: PromiseOrValue<BytesLike>;
  };

  export type OutputRootProofStructOutput = [string, string, string, string] & {
    version: string;
    stateRoot: string;
    messagePasserStorageRoot: string;
    latestBlockhash: string;
  };
}

export interface OptimismPortalInterface extends utils.Interface {
  functions: {
    "BASE_FEE_MAX_CHANGE_DENOMINATOR()": FunctionFragment;
    "ELASTICITY_MULTIPLIER()": FunctionFragment;
    "FINALIZATION_PERIOD_SECONDS()": FunctionFragment;
    "INITIAL_BASE_FEE()": FunctionFragment;
    "L2_ORACLE()": FunctionFragment;
    "MAX_RESOURCE_LIMIT()": FunctionFragment;
    "MINIMUM_BASE_FEE()": FunctionFragment;
    "TARGET_RESOURCE_LIMIT()": FunctionFragment;
    "depositTransaction(address,uint256,uint64,bool,bytes)": FunctionFragment;
    "finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes)": FunctionFragment;
    "finalizedWithdrawals(bytes32)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isBlockFinalized(uint256)": FunctionFragment;
    "l2Sender()": FunctionFragment;
    "params()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE_FEE_MAX_CHANGE_DENOMINATOR"
      | "ELASTICITY_MULTIPLIER"
      | "FINALIZATION_PERIOD_SECONDS"
      | "INITIAL_BASE_FEE"
      | "L2_ORACLE"
      | "MAX_RESOURCE_LIMIT"
      | "MINIMUM_BASE_FEE"
      | "TARGET_RESOURCE_LIMIT"
      | "depositTransaction"
      | "finalizeWithdrawalTransaction"
      | "finalizedWithdrawals"
      | "initialize"
      | "isBlockFinalized"
      | "l2Sender"
      | "params"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASE_FEE_MAX_CHANGE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ELASTICITY_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FINALIZATION_PERIOD_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_BASE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "L2_ORACLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_RESOURCE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_BASE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TARGET_RESOURCE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeWithdrawalTransaction",
    values: [
      Types.WithdrawalTransactionStruct,
      PromiseOrValue<BigNumberish>,
      Types.OutputRootProofStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizedWithdrawals",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlockFinalized",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "l2Sender", values?: undefined): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BASE_FEE_MAX_CHANGE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ELASTICITY_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FINALIZATION_PERIOD_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_BASE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "L2_ORACLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_RESOURCE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_BASE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TARGET_RESOURCE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeWithdrawalTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBlockFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2Sender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "TransactionDeposited(address,address,uint256,bytes)": EventFragment;
    "WithdrawalFinalized(bytes32,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalFinalized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface TransactionDepositedEventObject {
  from: string;
  to: string;
  version: BigNumber;
  opaqueData: string;
}
export type TransactionDepositedEvent = TypedEvent<
  [string, string, BigNumber, string],
  TransactionDepositedEventObject
>;

export type TransactionDepositedEventFilter =
  TypedEventFilter<TransactionDepositedEvent>;

export interface WithdrawalFinalizedEventObject {
  withdrawalHash: string;
  success: boolean;
}
export type WithdrawalFinalizedEvent = TypedEvent<
  [string, boolean],
  WithdrawalFinalizedEventObject
>;

export type WithdrawalFinalizedEventFilter =
  TypedEventFilter<WithdrawalFinalizedEvent>;

export interface OptimismPortal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimismPortalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_FEE_MAX_CHANGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ELASTICITY_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    FINALIZATION_PERIOD_SECONDS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    INITIAL_BASE_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    L2_ORACLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_BASE_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TARGET_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositTransaction(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _isCreation: PromiseOrValue<boolean>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeWithdrawalTransaction(
      _tx: Types.WithdrawalTransactionStruct,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _outputRootProof: Types.OutputRootProofStruct,
      _withdrawalProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizedWithdrawals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isBlockFinalized(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    l2Sender(overrides?: CallOverrides): Promise<[string]>;

    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  BASE_FEE_MAX_CHANGE_DENOMINATOR(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ELASTICITY_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  FINALIZATION_PERIOD_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  INITIAL_BASE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  L2_ORACLE(overrides?: CallOverrides): Promise<string>;

  MAX_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_BASE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  TARGET_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  depositTransaction(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _isCreation: PromiseOrValue<boolean>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeWithdrawalTransaction(
    _tx: Types.WithdrawalTransactionStruct,
    _l2BlockNumber: PromiseOrValue<BigNumberish>,
    _outputRootProof: Types.OutputRootProofStruct,
    _withdrawalProof: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizedWithdrawals(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isBlockFinalized(
    _l2BlockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l2Sender(overrides?: CallOverrides): Promise<string>;

  params(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      prevBaseFee: BigNumber;
      prevBoughtGas: BigNumber;
      prevBlockNum: BigNumber;
    }
  >;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASE_FEE_MAX_CHANGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ELASTICITY_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    FINALIZATION_PERIOD_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_BASE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    L2_ORACLE(overrides?: CallOverrides): Promise<string>;

    MAX_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_BASE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    depositTransaction(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _isCreation: PromiseOrValue<boolean>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeWithdrawalTransaction(
      _tx: Types.WithdrawalTransactionStruct,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _outputRootProof: Types.OutputRootProofStruct,
      _withdrawalProof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizedWithdrawals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isBlockFinalized(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l2Sender(overrides?: CallOverrides): Promise<string>;

    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "TransactionDeposited(address,address,uint256,bytes)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<BigNumberish> | null,
      opaqueData?: null
    ): TransactionDepositedEventFilter;
    TransactionDeposited(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<BigNumberish> | null,
      opaqueData?: null
    ): TransactionDepositedEventFilter;

    "WithdrawalFinalized(bytes32,bool)"(
      withdrawalHash?: PromiseOrValue<BytesLike> | null,
      success?: null
    ): WithdrawalFinalizedEventFilter;
    WithdrawalFinalized(
      withdrawalHash?: PromiseOrValue<BytesLike> | null,
      success?: null
    ): WithdrawalFinalizedEventFilter;
  };

  estimateGas: {
    BASE_FEE_MAX_CHANGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ELASTICITY_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    FINALIZATION_PERIOD_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_BASE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    L2_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_BASE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    depositTransaction(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _isCreation: PromiseOrValue<boolean>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeWithdrawalTransaction(
      _tx: Types.WithdrawalTransactionStruct,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _outputRootProof: Types.OutputRootProofStruct,
      _withdrawalProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizedWithdrawals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isBlockFinalized(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2Sender(overrides?: CallOverrides): Promise<BigNumber>;

    params(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_FEE_MAX_CHANGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ELASTICITY_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FINALIZATION_PERIOD_SECONDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_BASE_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    L2_ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_RESOURCE_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMUM_BASE_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TARGET_RESOURCE_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositTransaction(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _isCreation: PromiseOrValue<boolean>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeWithdrawalTransaction(
      _tx: Types.WithdrawalTransactionStruct,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _outputRootProof: Types.OutputRootProofStruct,
      _withdrawalProof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizedWithdrawals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isBlockFinalized(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2Sender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    params(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
