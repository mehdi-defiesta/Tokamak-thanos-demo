/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface MeterUserInterface extends utils.Interface {
  functions: {
    "BASE_FEE_MAX_CHANGE_DENOMINATOR()": FunctionFragment;
    "ELASTICITY_MULTIPLIER()": FunctionFragment;
    "INITIAL_BASE_FEE()": FunctionFragment;
    "MAX_RESOURCE_LIMIT()": FunctionFragment;
    "MINIMUM_BASE_FEE()": FunctionFragment;
    "TARGET_RESOURCE_LIMIT()": FunctionFragment;
    "initialize()": FunctionFragment;
    "params()": FunctionFragment;
    "use(uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE_FEE_MAX_CHANGE_DENOMINATOR"
      | "ELASTICITY_MULTIPLIER"
      | "INITIAL_BASE_FEE"
      | "MAX_RESOURCE_LIMIT"
      | "MINIMUM_BASE_FEE"
      | "TARGET_RESOURCE_LIMIT"
      | "initialize"
      | "params"
      | "use"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASE_FEE_MAX_CHANGE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ELASTICITY_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_BASE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_RESOURCE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_BASE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TARGET_RESOURCE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "use",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_FEE_MAX_CHANGE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ELASTICITY_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_BASE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_RESOURCE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_BASE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TARGET_RESOURCE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "use", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MeterUser extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MeterUserInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_FEE_MAX_CHANGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ELASTICITY_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    INITIAL_BASE_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_BASE_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TARGET_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    use(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_FEE_MAX_CHANGE_DENOMINATOR(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ELASTICITY_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  INITIAL_BASE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_BASE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  TARGET_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  params(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      prevBaseFee: BigNumber;
      prevBoughtGas: BigNumber;
      prevBlockNum: BigNumber;
    }
  >;

  use(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_FEE_MAX_CHANGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ELASTICITY_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_BASE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_BASE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    params(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        prevBaseFee: BigNumber;
        prevBoughtGas: BigNumber;
        prevBlockNum: BigNumber;
      }
    >;

    use(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    BASE_FEE_MAX_CHANGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ELASTICITY_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_BASE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_BASE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET_RESOURCE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    params(overrides?: CallOverrides): Promise<BigNumber>;

    use(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_FEE_MAX_CHANGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ELASTICITY_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_BASE_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_RESOURCE_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMUM_BASE_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TARGET_RESOURCE_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    params(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    use(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
