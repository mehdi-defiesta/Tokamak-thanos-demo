/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface RLPReader_TestInterface extends utils.Interface {
  functions: {
    "IS_SCRIPT()": FunctionFragment;
    "IS_TEST()": FunctionFragment;
    "_setUp()": FunctionFragment;
    "deal(address,address,uint256)": FunctionFragment;
    "deal(address,address,uint256,bool)": FunctionFragment;
    "deal(address,uint256)": FunctionFragment;
    "deployCode(string,bytes)": FunctionFragment;
    "deployCode(string)": FunctionFragment;
    "failed()": FunctionFragment;
    "hoax(address)": FunctionFragment;
    "hoax(address,address)": FunctionFragment;
    "hoax(address,address,uint256)": FunctionFragment;
    "hoax(address,uint256)": FunctionFragment;
    "rewind(uint256)": FunctionFragment;
    "skip(uint256)": FunctionFragment;
    "startHoax(address,uint256)": FunctionFragment;
    "startHoax(address,address,uint256)": FunctionFragment;
    "startHoax(address)": FunctionFragment;
    "startHoax(address,address)": FunctionFragment;
    "testReadBool()": FunctionFragment;
    "test_readAddress()": FunctionFragment;
    "test_readAddressSmall()": FunctionFragment;
    "test_readAddressTooLarge()": FunctionFragment;
    "test_readAddressTooShort()": FunctionFragment;
    "test_readBoolInvalidValue()": FunctionFragment;
    "test_readBoolLargeInput()": FunctionFragment;
    "test_readBytes32_revertOnList()": FunctionFragment;
    "test_readBytes32_revertOnTooLong()": FunctionFragment;
    "test_readBytes_bytestring00()": FunctionFragment;
    "test_readBytes_bytestring01()": FunctionFragment;
    "test_readBytes_bytestring7f()": FunctionFragment;
    "test_readBytes_invalidListLength()": FunctionFragment;
    "test_readBytes_invalidStringLength()": FunctionFragment;
    "test_readBytes_revertListItem()": FunctionFragment;
    "test_readList_dictTest1()": FunctionFragment;
    "test_readList_empty()": FunctionFragment;
    "test_readList_incorrectLengthInArray()": FunctionFragment;
    "test_readList_int32Overflow()": FunctionFragment;
    "test_readList_int32Overflow2()": FunctionFragment;
    "test_readList_invalidShortList()": FunctionFragment;
    "test_readList_invalidValue()": FunctionFragment;
    "test_readList_leadingZerosInLongLengthArray1()": FunctionFragment;
    "test_readList_leadingZerosInLongLengthArray2()": FunctionFragment;
    "test_readList_leadingZerosInLongLengthList1()": FunctionFragment;
    "test_readList_listOfLists()": FunctionFragment;
    "test_readList_listOfLists2()": FunctionFragment;
    "test_readList_longList1()": FunctionFragment;
    "test_readList_longList2()": FunctionFragment;
    "test_readList_longStringLength()": FunctionFragment;
    "test_readList_multiList()": FunctionFragment;
    "test_readList_nonOptimalLongLengthArray1()": FunctionFragment;
    "test_readList_nonOptimalLongLengthArray2()": FunctionFragment;
    "test_readList_notLongEnough()": FunctionFragment;
    "test_readList_shortListMax1()": FunctionFragment;
    "test_readList_stringList()": FunctionFragment;
    "test_readString_emptyString()": FunctionFragment;
    "test_readString_longString()": FunctionFragment;
    "test_readString_longString2()": FunctionFragment;
    "test_readString_shortString()": FunctionFragment;
    "test_readString_shortString2()": FunctionFragment;
    "test_readUint256_mediumInt1()": FunctionFragment;
    "test_readUint256_mediumInt2()": FunctionFragment;
    "test_readUint256_mediumInt3()": FunctionFragment;
    "test_readUint256_smallInt()": FunctionFragment;
    "test_readUint256_smallInt2()": FunctionFragment;
    "test_readUint256_smallInt3()": FunctionFragment;
    "test_readUint256_smallInt4()": FunctionFragment;
    "test_readUint256_zero()": FunctionFragment;
    "tip(address,address,uint256)": FunctionFragment;
    "vm()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_SCRIPT"
      | "IS_TEST"
      | "_setUp"
      | "deal(address,address,uint256)"
      | "deal(address,address,uint256,bool)"
      | "deal(address,uint256)"
      | "deployCode(string,bytes)"
      | "deployCode(string)"
      | "failed"
      | "hoax(address)"
      | "hoax(address,address)"
      | "hoax(address,address,uint256)"
      | "hoax(address,uint256)"
      | "rewind"
      | "skip"
      | "startHoax(address,uint256)"
      | "startHoax(address,address,uint256)"
      | "startHoax(address)"
      | "startHoax(address,address)"
      | "testReadBool"
      | "test_readAddress"
      | "test_readAddressSmall"
      | "test_readAddressTooLarge"
      | "test_readAddressTooShort"
      | "test_readBoolInvalidValue"
      | "test_readBoolLargeInput"
      | "test_readBytes32_revertOnList"
      | "test_readBytes32_revertOnTooLong"
      | "test_readBytes_bytestring00"
      | "test_readBytes_bytestring01"
      | "test_readBytes_bytestring7f"
      | "test_readBytes_invalidListLength"
      | "test_readBytes_invalidStringLength"
      | "test_readBytes_revertListItem"
      | "test_readList_dictTest1"
      | "test_readList_empty"
      | "test_readList_incorrectLengthInArray"
      | "test_readList_int32Overflow"
      | "test_readList_int32Overflow2"
      | "test_readList_invalidShortList"
      | "test_readList_invalidValue"
      | "test_readList_leadingZerosInLongLengthArray1"
      | "test_readList_leadingZerosInLongLengthArray2"
      | "test_readList_leadingZerosInLongLengthList1"
      | "test_readList_listOfLists"
      | "test_readList_listOfLists2"
      | "test_readList_longList1"
      | "test_readList_longList2"
      | "test_readList_longStringLength"
      | "test_readList_multiList"
      | "test_readList_nonOptimalLongLengthArray1"
      | "test_readList_nonOptimalLongLengthArray2"
      | "test_readList_notLongEnough"
      | "test_readList_shortListMax1"
      | "test_readList_stringList"
      | "test_readString_emptyString"
      | "test_readString_longString"
      | "test_readString_longString2"
      | "test_readString_shortString"
      | "test_readString_shortString2"
      | "test_readUint256_mediumInt1"
      | "test_readUint256_mediumInt2"
      | "test_readUint256_mediumInt3"
      | "test_readUint256_smallInt"
      | "test_readUint256_smallInt2"
      | "test_readUint256_smallInt3"
      | "test_readUint256_smallInt4"
      | "test_readUint256_zero"
      | "tip"
      | "vm"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(functionFragment: "_setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deal(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deal(address,address,uint256,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deal(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployCode(string,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployCode(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hoax(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hoax(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hoax(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hoax(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewind",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "skip",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startHoax(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startHoax(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startHoax(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startHoax(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "testReadBool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readAddressSmall",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readAddressTooLarge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readAddressTooShort",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readBoolInvalidValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readBoolLargeInput",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readBytes32_revertOnList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readBytes32_revertOnTooLong",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readBytes_bytestring00",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readBytes_bytestring01",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readBytes_bytestring7f",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readBytes_invalidListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readBytes_invalidStringLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readBytes_revertListItem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_dictTest1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_empty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_incorrectLengthInArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_int32Overflow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_int32Overflow2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_invalidShortList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_invalidValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_leadingZerosInLongLengthArray1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_leadingZerosInLongLengthArray2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_leadingZerosInLongLengthList1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_listOfLists",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_listOfLists2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_longList1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_longList2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_longStringLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_multiList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_nonOptimalLongLengthArray1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_nonOptimalLongLengthArray2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_notLongEnough",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_shortListMax1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readList_stringList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readString_emptyString",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readString_longString",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readString_longString2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readString_shortString",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readString_shortString2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readUint256_mediumInt1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readUint256_mediumInt2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readUint256_mediumInt3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readUint256_smallInt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readUint256_smallInt2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readUint256_smallInt3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readUint256_smallInt4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_readUint256_zero",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tip",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deal(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deal(address,address,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deal(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCode(string,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCode(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hoax(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hoax(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hoax(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hoax(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startHoax(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startHoax(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startHoax(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startHoax(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testReadBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readAddressSmall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readAddressTooLarge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readAddressTooShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readBoolInvalidValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readBoolLargeInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readBytes32_revertOnList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readBytes32_revertOnTooLong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readBytes_bytestring00",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readBytes_bytestring01",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readBytes_bytestring7f",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readBytes_invalidListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readBytes_invalidStringLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readBytes_revertListItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_dictTest1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_empty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_incorrectLengthInArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_int32Overflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_int32Overflow2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_invalidShortList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_invalidValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_leadingZerosInLongLengthArray1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_leadingZerosInLongLengthArray2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_leadingZerosInLongLengthList1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_listOfLists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_listOfLists2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_longList1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_longList2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_longStringLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_multiList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_nonOptimalLongLengthArray1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_nonOptimalLongLengthArray2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_notLongEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_shortListMax1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readList_stringList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readString_emptyString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readString_longString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readString_longString2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readString_shortString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readString_shortString2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readUint256_mediumInt1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readUint256_mediumInt2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readUint256_mediumInt3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readUint256_smallInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readUint256_smallInt2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readUint256_smallInt3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readUint256_smallInt4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_readUint256_zero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;

  events: {
    "TransactionDeposited(address,address,uint256,bytes)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TransactionDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface TransactionDepositedEventObject {
  from: string;
  to: string;
  version: BigNumber;
  opaqueData: string;
}
export type TransactionDepositedEvent = TypedEvent<
  [string, string, BigNumber, string],
  TransactionDepositedEventObject
>;

export type TransactionDepositedEventFilter =
  TypedEventFilter<TransactionDepositedEvent>;

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface RLPReader_Test extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RLPReader_TestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<[boolean]>;

    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    _setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deal(address,address,uint256)"(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deal(address,address,uint256,bool)"(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      adjust: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deal(address,uint256)"(
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deployCode(string,bytes)"(
      what: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deployCode(string)"(
      what: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "hoax(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "hoax(address,address)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "hoax(address,address,uint256)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "hoax(address,uint256)"(
      who: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewind(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    skip(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "startHoax(address,uint256)"(
      who: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "startHoax(address,address,uint256)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "startHoax(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "startHoax(address,address)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testReadBool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readAddressSmall(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readAddressTooLarge(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readAddressTooShort(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readBoolInvalidValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readBoolLargeInput(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readBytes32_revertOnList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readBytes32_revertOnTooLong(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readBytes_bytestring00(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readBytes_bytestring01(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readBytes_bytestring7f(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readBytes_invalidListLength(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readBytes_invalidStringLength(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readBytes_revertListItem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_dictTest1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_empty(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_incorrectLengthInArray(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_int32Overflow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_int32Overflow2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_invalidShortList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_invalidValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_leadingZerosInLongLengthArray1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_leadingZerosInLongLengthArray2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_leadingZerosInLongLengthList1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_listOfLists(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_listOfLists2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_longList1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_longList2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_longStringLength(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_multiList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_nonOptimalLongLengthArray1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_nonOptimalLongLengthArray2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_notLongEnough(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_shortListMax1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readList_stringList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readString_emptyString(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readString_longString(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readString_longString2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readString_shortString(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readString_shortString2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readUint256_mediumInt1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readUint256_mediumInt2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readUint256_mediumInt3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readUint256_smallInt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readUint256_smallInt2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readUint256_smallInt3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readUint256_smallInt4(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    test_readUint256_zero(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tip(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vm(overrides?: CallOverrides): Promise<[string]>;
  };

  IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  _setUp(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deal(address,address,uint256)"(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    give: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deal(address,address,uint256,bool)"(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    give: PromiseOrValue<BigNumberish>,
    adjust: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deal(address,uint256)"(
    to: PromiseOrValue<string>,
    give: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deployCode(string,bytes)"(
    what: PromiseOrValue<string>,
    args: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deployCode(string)"(
    what: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  failed(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "hoax(address)"(
    who: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "hoax(address,address)"(
    who: PromiseOrValue<string>,
    origin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "hoax(address,address,uint256)"(
    who: PromiseOrValue<string>,
    origin: PromiseOrValue<string>,
    give: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "hoax(address,uint256)"(
    who: PromiseOrValue<string>,
    give: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewind(
    time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  skip(
    time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "startHoax(address,uint256)"(
    who: PromiseOrValue<string>,
    give: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "startHoax(address,address,uint256)"(
    who: PromiseOrValue<string>,
    origin: PromiseOrValue<string>,
    give: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "startHoax(address)"(
    who: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "startHoax(address,address)"(
    who: PromiseOrValue<string>,
    origin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testReadBool(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readAddress(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readAddressSmall(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readAddressTooLarge(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readAddressTooShort(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readBoolInvalidValue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readBoolLargeInput(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readBytes32_revertOnList(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readBytes32_revertOnTooLong(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readBytes_bytestring00(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readBytes_bytestring01(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readBytes_bytestring7f(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readBytes_invalidListLength(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readBytes_invalidStringLength(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readBytes_revertListItem(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_dictTest1(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_empty(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_incorrectLengthInArray(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_int32Overflow(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_int32Overflow2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_invalidShortList(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_invalidValue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_leadingZerosInLongLengthArray1(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_leadingZerosInLongLengthArray2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_leadingZerosInLongLengthList1(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_listOfLists(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_listOfLists2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_longList1(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_longList2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_longStringLength(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_multiList(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_nonOptimalLongLengthArray1(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_nonOptimalLongLengthArray2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_notLongEnough(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_shortListMax1(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readList_stringList(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readString_emptyString(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readString_longString(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readString_longString2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readString_shortString(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readString_shortString2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readUint256_mediumInt1(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readUint256_mediumInt2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readUint256_mediumInt3(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readUint256_smallInt(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readUint256_smallInt2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readUint256_smallInt3(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readUint256_smallInt4(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  test_readUint256_zero(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tip(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    give: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    _setUp(overrides?: CallOverrides): Promise<void>;

    "deal(address,address,uint256)"(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "deal(address,address,uint256,bool)"(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      adjust: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "deal(address,uint256)"(
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployCode(string,bytes)"(
      what: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "deployCode(string)"(
      what: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    "hoax(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "hoax(address,address)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "hoax(address,address,uint256)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "hoax(address,uint256)"(
      who: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewind(
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    skip(
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "startHoax(address,uint256)"(
      who: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "startHoax(address,address,uint256)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "startHoax(address)"(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "startHoax(address,address)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    testReadBool(overrides?: CallOverrides): Promise<void>;

    test_readAddress(overrides?: CallOverrides): Promise<void>;

    test_readAddressSmall(overrides?: CallOverrides): Promise<void>;

    test_readAddressTooLarge(overrides?: CallOverrides): Promise<void>;

    test_readAddressTooShort(overrides?: CallOverrides): Promise<void>;

    test_readBoolInvalidValue(overrides?: CallOverrides): Promise<void>;

    test_readBoolLargeInput(overrides?: CallOverrides): Promise<void>;

    test_readBytes32_revertOnList(overrides?: CallOverrides): Promise<void>;

    test_readBytes32_revertOnTooLong(overrides?: CallOverrides): Promise<void>;

    test_readBytes_bytestring00(overrides?: CallOverrides): Promise<void>;

    test_readBytes_bytestring01(overrides?: CallOverrides): Promise<void>;

    test_readBytes_bytestring7f(overrides?: CallOverrides): Promise<void>;

    test_readBytes_invalidListLength(overrides?: CallOverrides): Promise<void>;

    test_readBytes_invalidStringLength(
      overrides?: CallOverrides
    ): Promise<void>;

    test_readBytes_revertListItem(overrides?: CallOverrides): Promise<void>;

    test_readList_dictTest1(overrides?: CallOverrides): Promise<void>;

    test_readList_empty(overrides?: CallOverrides): Promise<void>;

    test_readList_incorrectLengthInArray(
      overrides?: CallOverrides
    ): Promise<void>;

    test_readList_int32Overflow(overrides?: CallOverrides): Promise<void>;

    test_readList_int32Overflow2(overrides?: CallOverrides): Promise<void>;

    test_readList_invalidShortList(overrides?: CallOverrides): Promise<void>;

    test_readList_invalidValue(overrides?: CallOverrides): Promise<void>;

    test_readList_leadingZerosInLongLengthArray1(
      overrides?: CallOverrides
    ): Promise<void>;

    test_readList_leadingZerosInLongLengthArray2(
      overrides?: CallOverrides
    ): Promise<void>;

    test_readList_leadingZerosInLongLengthList1(
      overrides?: CallOverrides
    ): Promise<void>;

    test_readList_listOfLists(overrides?: CallOverrides): Promise<void>;

    test_readList_listOfLists2(overrides?: CallOverrides): Promise<void>;

    test_readList_longList1(overrides?: CallOverrides): Promise<void>;

    test_readList_longList2(overrides?: CallOverrides): Promise<void>;

    test_readList_longStringLength(overrides?: CallOverrides): Promise<void>;

    test_readList_multiList(overrides?: CallOverrides): Promise<void>;

    test_readList_nonOptimalLongLengthArray1(
      overrides?: CallOverrides
    ): Promise<void>;

    test_readList_nonOptimalLongLengthArray2(
      overrides?: CallOverrides
    ): Promise<void>;

    test_readList_notLongEnough(overrides?: CallOverrides): Promise<void>;

    test_readList_shortListMax1(overrides?: CallOverrides): Promise<void>;

    test_readList_stringList(overrides?: CallOverrides): Promise<void>;

    test_readString_emptyString(overrides?: CallOverrides): Promise<void>;

    test_readString_longString(overrides?: CallOverrides): Promise<void>;

    test_readString_longString2(overrides?: CallOverrides): Promise<void>;

    test_readString_shortString(overrides?: CallOverrides): Promise<void>;

    test_readString_shortString2(overrides?: CallOverrides): Promise<void>;

    test_readUint256_mediumInt1(overrides?: CallOverrides): Promise<void>;

    test_readUint256_mediumInt2(overrides?: CallOverrides): Promise<void>;

    test_readUint256_mediumInt3(overrides?: CallOverrides): Promise<void>;

    test_readUint256_smallInt(overrides?: CallOverrides): Promise<void>;

    test_readUint256_smallInt2(overrides?: CallOverrides): Promise<void>;

    test_readUint256_smallInt3(overrides?: CallOverrides): Promise<void>;

    test_readUint256_smallInt4(overrides?: CallOverrides): Promise<void>;

    test_readUint256_zero(overrides?: CallOverrides): Promise<void>;

    tip(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "TransactionDeposited(address,address,uint256,bytes)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<BigNumberish> | null,
      opaqueData?: null
    ): TransactionDepositedEventFilter;
    TransactionDeposited(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<BigNumberish> | null,
      opaqueData?: null
    ): TransactionDepositedEventFilter;

    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<BigNumber>;

    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    _setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deal(address,address,uint256)"(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deal(address,address,uint256,bool)"(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      adjust: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deal(address,uint256)"(
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deployCode(string,bytes)"(
      what: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deployCode(string)"(
      what: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "hoax(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "hoax(address,address)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "hoax(address,address,uint256)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "hoax(address,uint256)"(
      who: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewind(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    skip(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "startHoax(address,uint256)"(
      who: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "startHoax(address,address,uint256)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "startHoax(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "startHoax(address,address)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testReadBool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readAddressSmall(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readAddressTooLarge(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readAddressTooShort(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readBoolInvalidValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readBoolLargeInput(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readBytes32_revertOnList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readBytes32_revertOnTooLong(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readBytes_bytestring00(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readBytes_bytestring01(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readBytes_bytestring7f(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readBytes_invalidListLength(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readBytes_invalidStringLength(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readBytes_revertListItem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_dictTest1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_empty(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_incorrectLengthInArray(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_int32Overflow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_int32Overflow2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_invalidShortList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_invalidValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_leadingZerosInLongLengthArray1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_leadingZerosInLongLengthArray2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_leadingZerosInLongLengthList1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_listOfLists(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_listOfLists2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_longList1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_longList2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_longStringLength(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_multiList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_nonOptimalLongLengthArray1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_nonOptimalLongLengthArray2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_notLongEnough(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_shortListMax1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readList_stringList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readString_emptyString(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readString_longString(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readString_longString2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readString_shortString(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readString_shortString2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readUint256_mediumInt1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readUint256_mediumInt2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readUint256_mediumInt3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readUint256_smallInt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readUint256_smallInt2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readUint256_smallInt3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readUint256_smallInt4(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    test_readUint256_zero(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tip(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deal(address,address,uint256)"(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deal(address,address,uint256,bool)"(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      adjust: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deal(address,uint256)"(
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deployCode(string,bytes)"(
      what: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deployCode(string)"(
      what: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "hoax(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "hoax(address,address)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "hoax(address,address,uint256)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "hoax(address,uint256)"(
      who: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewind(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    skip(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "startHoax(address,uint256)"(
      who: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "startHoax(address,address,uint256)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "startHoax(address)"(
      who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "startHoax(address,address)"(
      who: PromiseOrValue<string>,
      origin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testReadBool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readAddressSmall(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readAddressTooLarge(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readAddressTooShort(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readBoolInvalidValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readBoolLargeInput(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readBytes32_revertOnList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readBytes32_revertOnTooLong(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readBytes_bytestring00(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readBytes_bytestring01(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readBytes_bytestring7f(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readBytes_invalidListLength(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readBytes_invalidStringLength(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readBytes_revertListItem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_dictTest1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_empty(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_incorrectLengthInArray(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_int32Overflow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_int32Overflow2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_invalidShortList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_invalidValue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_leadingZerosInLongLengthArray1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_leadingZerosInLongLengthArray2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_leadingZerosInLongLengthList1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_listOfLists(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_listOfLists2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_longList1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_longList2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_longStringLength(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_multiList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_nonOptimalLongLengthArray1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_nonOptimalLongLengthArray2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_notLongEnough(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_shortListMax1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readList_stringList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readString_emptyString(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readString_longString(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readString_longString2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readString_shortString(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readString_shortString2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readUint256_mediumInt1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readUint256_mediumInt2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readUint256_mediumInt3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readUint256_smallInt(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readUint256_smallInt2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readUint256_smallInt3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readUint256_smallInt4(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    test_readUint256_zero(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tip(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      give: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
