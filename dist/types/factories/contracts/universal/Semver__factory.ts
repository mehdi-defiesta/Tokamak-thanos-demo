/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Semver,
  SemverInterface,
} from "../../../contracts/universal/Semver";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_major",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_patch",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b5060405161051738038061051783398101604081905261002f91610040565b60809290925260a05260c05261006e565b60008060006060848603121561005557600080fd5b8351925060208401519150604084015190509250925092565b60805160a05160c05161047d61009a600039600060a701526000607e015260006055015261047d6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806354fd4d5014610030575b600080fd5b61003861004e565b604051610045919061025e565b60405180910390f35b60606100797f00000000000000000000000000000000000000000000000000000000000000006100f1565b6100a27f00000000000000000000000000000000000000000000000000000000000000006100f1565b6100cb7f00000000000000000000000000000000000000000000000000000000000000006100f1565b6040516020016100dd939291906102af565b604051602081830303815290604052905090565b60608160000361013457505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561015e578061014881610354565b91506101579050600a836103bb565b9150610138565b60008167ffffffffffffffff811115610179576101796103cf565b6040519080825280601f01601f1916602001820160405280156101a3576020820181803683370190505b5090505b8415610226576101b86001836103fe565b91506101c5600a86610415565b6101d0906030610429565b60f81b8183815181106101e5576101e5610441565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061021f600a866103bb565b94506101a7565b949350505050565b60005b83811015610249578181015183820152602001610231565b83811115610258576000848401525b50505050565b602081526000825180602084015261027d81604085016020870161022e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600084516102c181846020890161022e565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516102fd816001850160208a0161022e565b6001920191820152835161031881600284016020880161022e565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361038557610385610325565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826103ca576103ca61038c565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008282101561041057610410610325565b500390565b6000826104245761042461038c565b500690565b6000821982111561043c5761043c610325565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea164736f6c634300080f000a";

type SemverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SemverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Semver__factory extends ContractFactory {
  constructor(...args: SemverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _major: PromiseOrValue<BigNumberish>,
    _minor: PromiseOrValue<BigNumberish>,
    _patch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Semver> {
    return super.deploy(
      _major,
      _minor,
      _patch,
      overrides || {}
    ) as Promise<Semver>;
  }
  override getDeployTransaction(
    _major: PromiseOrValue<BigNumberish>,
    _minor: PromiseOrValue<BigNumberish>,
    _patch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_major, _minor, _patch, overrides || {});
  }
  override attach(address: string): Semver {
    return super.attach(address) as Semver;
  }
  override connect(signer: Signer): Semver__factory {
    return super.connect(signer) as Semver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SemverInterface {
    return new utils.Interface(_abi) as SemverInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Semver {
    return new Contract(address, _abi, signerOrProvider) as Semver;
  }
}
