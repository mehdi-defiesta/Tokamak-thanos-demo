/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CallerCaller,
  CallerCallerInterface,
} from "../../../../contracts/test/CommonTest.t.sol/CallerCaller";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "returndata",
        type: "bytes",
      },
    ],
    name: "WhatHappened",
    type: "event",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061016d806100206000396000f3fe608060405234801561001057600080fd5b506000803373ffffffffffffffffffffffffffffffffffffffff1660003660405161003c9291906100d3565b6000604051808303816000865af19150503d8060008114610079576040519150601f19603f3d011682016040523d82523d6000602084013e61007e565b606091505b50915091507f2106b16c04ed7c28102e8f5bae2a81f8f969346efa3d397f8dd488794385d41482826040516100b49291906100e3565b60405180910390a18180156100cb57815160208301f35b815160208301fd5b8183823760009101908152919050565b821515815260006020604081840152835180604085015260005b81811015610119578581018301518582016060015282016100fd565b8181111561012b576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160600194935050505056fea164736f6c634300080f000a";

type CallerCallerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CallerCallerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CallerCaller__factory extends ContractFactory {
  constructor(...args: CallerCallerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CallerCaller> {
    return super.deploy(overrides || {}) as Promise<CallerCaller>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CallerCaller {
    return super.attach(address) as CallerCaller;
  }
  override connect(signer: Signer): CallerCaller__factory {
    return super.connect(signer) as CallerCaller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallerCallerInterface {
    return new utils.Interface(_abi) as CallerCallerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CallerCaller {
    return new Contract(address, _abi, signerOrProvider) as CallerCaller;
  }
}
