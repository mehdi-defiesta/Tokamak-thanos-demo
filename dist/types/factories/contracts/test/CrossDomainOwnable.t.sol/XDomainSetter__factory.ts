/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  XDomainSetter,
  XDomainSetterInterface,
} from "../../../../contracts/test/CrossDomainOwnable.t.sol/XDomainSetter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "value",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103908061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063715018a611610050578063715018a61461009d5780638da5cb5b146100a5578063f2fde38b146100cd57600080fd5b80633fa4f2451461006c57806360fe47b114610088575b600080fd5b61007560015481565b6040519081526020015b60405180910390f35b61009b61009636600461032d565b6100e0565b005b61009b6100ed565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161007f565b61009b6100db366004610346565b610101565b6100e86101bd565b600155565b6100f56101bd565b6100ff60006102b8565b565b6101096101bd565b73ffffffffffffffffffffffffffffffffffffffff81166101b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6101ba816102b8565b50565b7fffffffffffffffffffffffffeeeeffffffffffffffffffffffffffffffffeeef330173ffffffffffffffffffffffffffffffffffffffff1661021560005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146100ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f43726f7373446f6d61696e4f776e61626c653a2063616c6c6572206973206e6f60448201527f7420746865206f776e657200000000000000000000000000000000000000000060648201526084016101a8565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561033f57600080fd5b5035919050565b60006020828403121561035857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461037c57600080fd5b939250505056fea164736f6c634300080f000a";

type XDomainSetterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: XDomainSetterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class XDomainSetter__factory extends ContractFactory {
  constructor(...args: XDomainSetterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<XDomainSetter> {
    return super.deploy(overrides || {}) as Promise<XDomainSetter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): XDomainSetter {
    return super.attach(address) as XDomainSetter;
  }
  override connect(signer: Signer): XDomainSetter__factory {
    return super.connect(signer) as XDomainSetter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): XDomainSetterInterface {
    return new utils.Interface(_abi) as XDomainSetterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): XDomainSetter {
    return new Contract(address, _abi, signerOrProvider) as XDomainSetter;
  }
}
